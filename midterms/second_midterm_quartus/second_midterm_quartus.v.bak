module second_midterm_quartus   (
input clk, reset,  zero_flag,
output reg sync_reset,
output wire [7:0] pm_address, pm_data,
output wire jump, conditional_jump,
            x_mux_select, y_mux_select, i_mux_select,
output wire [3:0] source_register_select, LS_nibble_of_ir, 
output wire [8:0] register_enables,
output wire [7:0] pc, instr_register,
output wire [7:0] from_ID, from_PS // conduits from prog sequencer and
                                   // and instruction decoder to testbench
                                   // used in second midterm and final exam
                        );

always @ (posedge clk)
sync_reset = reset;

program_memory prog_memory(
	.address(pm_address),
	.clock(~clk),
	.q(pm_data));
	
program_sequencer prog_sequencer (
       .clk(clk),
	    .sync_reset(sync_reset),
       .dont_jump_flag(zero_flag),
       .jump(jump),
       .conditional_jump(conditional_jump),
       .jump_addr(LS_nibble_of_ir), 
       .pm_address(pm_address),
       .pc(pc), //pc is taken out for purposes of debugging
       .from_PS(from_PS) // conduit to testbench for exams
       );
instruction_decoder inst_decoder( 
           .clk(clk), 
			  .sync_reset(sync_reset),
           .pm_data(pm_data),
           .jump(jump),
           .conditional_jump(conditional_jump),
           .LS_nibble_of_ir(LS_nibble_of_ir),
           .i_mux_select(i_mux_select),
           .y_mux_select(y_mux_select),
           .x_mux_select(x_mux_select),
           .source_register_select(source_register_select),
           .register_enables(register_enables),
           .ir(instr_register), // ir is for purposes of debugging
           .from_ID(from_ID) // conduit to testbench for exams
           );

													
endmodule 
